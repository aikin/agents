[project]
name = "career-chatbot-deepseek"
version = "0.1.0"
description = "AI Career Assistant with RAG, Memory, and Evaluator - Built with DeepSeek and Gemini"
readme = "README.md"
requires-python = ">=3.12"
authors = [
    { name = "Kin Lu", email = "your.email@example.com" }
]
license = { text = "MIT" }
keywords = ["ai", "chatbot", "rag", "deepseek", "gemini", "career-assistant"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
]

dependencies = [
    # Core LLM & AI
    "openai>=1.68.0",              # DeepSeek API (OpenAI-compatible)
    "google-generativeai>=0.8.0",  # Gemini for evaluation
    
    # Web Framework
    "gradio>=5.0.0",               # UI framework
    
    # Data & Validation
    "pydantic>=2.0.0",             # Data validation
    "pydantic-settings>=2.0.0",    # Configuration management
    "email-validator>=2.1.0",      # Email field validation for Pydantic models
    "sqlalchemy>=2.0.0",           # ORM for database
    
    # RAG & Vector Database
    "chromadb>=0.4.22",            # Vector database
    "sentence-transformers>=2.2.0", # Embeddings
    
    # Document Processing
    "pypdf>=5.0.0",                # PDF reading
    
    # Utilities
    "python-dotenv>=1.0.0",        # Environment variables
    "requests>=2.31.0",            # HTTP client for Pushover
]

[dependency-groups]
dev = [
    # Testing
    "pytest>=7.4.0",
    "pytest-cov>=4.1.0",
    "pytest-asyncio>=0.21.0",
    "pytest-mock>=3.11.0",
    
    # Code Quality
    "ruff>=0.1.0",                 # Linter
    "black>=23.0.0",               # Formatter
    "mypy>=1.5.0",                 # Type checker
    
    # Type Stubs
    "types-requests>=2.31.0",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[tool.hatch.build.targets.wheel]
packages = [
    "config",
    "models", 
    "services",
    "tools",
    "memory",
    "core",
    "utils"
]

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "-v",
    "--strict-markers",
    "--strict-config",
    "--cov=.",
    "--cov-report=term-missing",
    "--cov-report=html",
]

[tool.coverage.run]
source = ["."]
omit = [
    "tests/*",
    ".venv/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.ruff]
line-length = 100
target-version = "py312"
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
    "B008",  # do not perform function calls in argument defaults
]

[tool.ruff.per-file-ignores]
"__init__.py" = ["F401"]  # Allow unused imports in __init__.py
"tests/*" = ["B011"]      # Allow assert False in tests

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.git
  | \.venv
  | \.pytest_cache
  | __pycache__
  | data
)/
'''

[tool.mypy]
python_version = "3.12"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false
ignore_missing_imports = true

